Structural Alignment Module
=============================
The Structural Alignment Module is specifically developed to manage and execute the structural alignment of protein sequences. This sophisticated system is designed to handle various alignment algorithms, facilitating the comparison and analysis of protein 3D structures. It integrates with Python's multiprocessing framework and SQLAlchemy for efficient data handling and storage, making it a powerful tool for computational biology and bioinformatics research.
Class Overview
--------------

The `StructuralAlignmentManager` class is the core of this module, tailored for aligning protein structures within clusters identified by the CDHit module. It uses diverse structural alignment algorithms.

.. autoclass:: protein_metamorphisms_is.operations.structural_alignment.StructuralAlignmentManager
   :members:
   :undoc-members:
   :show-inheritance:

Key Features
------------

- **Cluster-Based Structural Alignment**: Aligns protein structures within clusters generated by CDHit.
- **Database Integration**: Efficiently manages protein structure data in SQL databases.
- **Concurrent Processing**: Utilizes multi-threading for aligning multiple structures in parallel.
- **Robust Error Handling**: Implements comprehensive error handling for reliable alignment operations.


SQL/ORM Entities
----------------

The module interacts with SQL/ORM entities relevant to protein clustering and structural data:

- :class:`~protein_metamorphisms_is.sql.model.PDBChains`: Manages information about Protein Data Bank chains.
- :class:`~protein_metamorphisms_is.sql.model.Cluster`: Stores data for clusters created by CDHit, crucial for alignment.
- :class:`~protein_metamorphisms_is.sql.model.CEAlignResults`: Records the outcomes of the CE alignment process.

These entities facilitate the organization and retrieval of protein structure data and alignment results within and across clusters.

Configuration
-------------

`StructuralAlignmentManager` requires specific configuration parameters for execution:

.. code-block:: yaml

    # Structural Alignment
    structural_alignment: [Methods to be used]
      types:
        - 1 [CE-Align]
        - 2 [US-Align]
        - 3 [FATCAT]

      retry_timeout: [Time to requeue]
      retry_count: [Number of attempts]
      batch_size: [Number of executions per queue iteration]
      task_timeout: [Maximum duration of the operation before being canceled]

These settings should be adjusted based on your structural alignment requirements.

To incorporate the information about the alignment task functions located in the specified files into your documentation, you can add a section titled "Available Tasks" that describes each of the alignment algorithms implemented by these functions. Here's how you could insert them into the documentation:

Available Tasks
---------------

.. toctree::
   :maxdepth: 2

   structural_alignment_tasks/combinatorial_extension
   structural_alignment_tasks/fatcat
   structural_alignment_tasks/universal

Usage
-----

To use `StructuralAlignmentManager`, initialize the class with the configuration and begin the alignment process:

.. code-block:: python

   from protein_metamorphisms_is.operations.structural_alignment import StructuralAlignmentManager
   # Start structural alignment
   StructuralAlignmentManager(conf).start()

This starts the structural alignment process, handling aspects from data loading to execution and storage, focusing on protein structures within the clusters generated by CDHit.
